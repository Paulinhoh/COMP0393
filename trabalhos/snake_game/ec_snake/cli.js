const readline = require('readline');   // Serve para receber as funcoes compartilhadas pelos outros arquivos garantido a ponte e mantendo a estrutura do jogo em v√°rios arquivos.
const Snake    = require('./snake')     // Serve para receber as funcoes compartilhadas pelos outros arquivos garantido a ponte e mantendo a estrutura do jogo em v√°rios arquivos.
const base     = require('./base')      // Serve para receber as funcoes compartilhadas pelos outros arquivos garantido a ponte e mantendo a estrutura do jogo em v√°rios arquivos.
Object.getOwnPropertyNames(base).map(p => global[p] = base[p])


// Estado √© mut√°vel
let State = Snake.initialState()  // Define o State como par√¢metro global para o estado incial do jogo. Retornando as informa√ß√µes base para o inicio do jogo

/*
!!!AVISO PARA CASO DE INCOMPATIBILIDADE!!!:
Alteramos o icone dos elementos(mapa,ma√ßa e obst√°culos) para 'emojis' com o intuito de dar uma apar√™ncia visual mais interessante e divertida ao jogo dentro da sa√≠da no terminal, entretanto caso haja incompatibilidade  dos 'emojis' colocados, deve alterar as apar√™ncias para o simbolo comum do teclado colocado como coment√°rio dentro da atribui√ß√£o do simbolo referente ao elemento dentro do c√≥digo
*/

// Opera√ß√µes da matriz de jogo
const Matrix = {
  make:       table => rep(rep('üåæ'/*.*/)(table.cols))(table.rows),           // A fun√ß√£o make serve para criar a mesa/mapa, repetindo '.' pela quantidade de colunas e linhas definidas no estado inicialEssa, ou seja, a fun√ß√£o √© respons√°vel por retornar o campo do jogo, cada quadrado do campo √© representado por (.). 
  set:        val   => pos => adjust(pos.y)(adjust(pos.x)(k(val))),           // A fun√ß√£o set rececebe como par√¢mentro um val e uma pos e devolve uma compara√ß√£o dentre tals par√¢metros para assim o valor de um for igual ao o outro devolver o primeiro par√¢metro caso contr√°rio o proximo par√¢metro.
  addSnake:   state => pipe(...map(Matrix.set('üîò'/*O*/))(state.snake)),      // Essa fun√ß√£o adiciona a cobra como vemos no jogo, definido como ser√° o elemento na qual ela se constitui e adicionando ela no mapa. Alteramos o corpo da cobra para ('üîò'), assim a est√©tica dela ficar√° mais destacada.
  addApple:   state => Matrix.set('üçé'/*a*/)(state.apple),                    // Essa fun√ß√£o representa a estrutura da "ma√ßa" onde pega seu estado atual e devolve o lugar em que ela se encontra. Alteramos a "ma√ßa" para ('üçé'), assim a est√©tica ficar√° similiar a de uma ma√ßa e o jogo fica mais divertido/criativo.
  addPoison1: state => Matrix.set('‚õî'/*X*/)(state.poison1),                  // A cria√ßao dessa fun√ß√£o tem intuito deixa o jogo mais din√¢mico, ela ir√° dimiuir uma fra√ß√£o do tamanho da cobra, ou seja, UM peda√ßo dela, caso a cobra esteja penas com UM PONTO ela dar√° Game Over.
  addPoison2: state => Matrix.set('‚õî'/*X*/)(state.poison2),                  //*A cria√ßao dessa fun√ß√£o tem intuito deixa o jogo mais din√¢mico, ela ir√° dimiuir uma fra√ß√£o do tamanho da cobra, ou seja, UM peda√ßo dela, caso a cobra esteja penas com UM PONTO ela dar√° Game Over.
  addtrap:    state => Matrix.set('üíÄ'/*#*/)(state.trap),                     // Criamos essa fun√ß√£o com objetivo de criar uma "armadilha" onde pega seu estado atual e devolve o lugar em que ele se encontra.
  addtrap2:   state => Matrix.set('üíÄ'/*#*/)(state.trap2),                    //*Criamos essa fun√ß√£o com objetivo de criar uma "armadilha" onde pega seu estado atual e devolve o lugar em que ele se encontra.
  addCrash:   state => state.snake.length == 0 ? map(map(k('üò≠'/*:(*/))):id,  // Essa fun√ß√£o usa uma CONDI√á√ÉO TERN√ÅRIA para verificar o tamanho da cobra, se o tamanho da cobra for igual a 0 ele ir√° da GAME OVER com a interface do jogo com o simbolo ('üò≠'), caso contrario retorna o seu estado. Alteramos a ilustra√ß√£o final do fim do jogo para ('üò≠'), assim ficar√° mais did√°tico que a partida do jogo chegou ao seu fim, ou seja, Game Over.  
  toString:   xsxs  => xsxs.map(xs => xs.join(' ')).join('\r\n'),             // Essa fun√ß√£o √© respos√°vel pelo espa√ßamento entre cada quadrado do campo do jogo. 
  fromState:  state => pipe( 
    Matrix.make,              // Adiciona o espa√ßo do jogo de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addSnake(state),   // Adiciona a cobra de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addApple(state),   // Adiciona a ma√ßa de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addCrash(state),   // Adiciona a colis√£o de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addPoison1(state), // Adiciona o veneno de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addPoison2(state), // Adiciona o segundo veneno de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addtrap(state),    // Adiciona a armadilha de forma vis√≠vel na mesa/campo (dentro do jogo).
    Matrix.addtrap2(state)    // Adiciona a segunda armadilha de forma vis√≠vel na mesa/campo (dentro do jogo).
  )(state)
}

 
// Eventos do teclado
//serve para fazer a ponte entre os comandos dados pelo usu√°rio e suas respostas dentro do jogo, garantindo a intera√ß√£o do jogador com o jogo
readline.emitKeypressEvents(process.stdin);
process.stdin.setRawMode(true);
process.stdin.on('keypress', (str, key) => { 
  if (key.ctrl && key.name === 'c') process.exit()
  switch (key.name.toUpperCase()) {                                                     // Essa func√£o switch garante o sistema de movimenta√ß√£o do jogo com base ao combado no usu√°rio, indicando para que dire√ß√£o e sentido a cobra ir√° se mover, alterando o estado dela dentro do jogo.
    case 'W': case 'K': case 'UP':    State = Snake.enqueue(State, Snake.NORTH); break  // Essa case indica a dire√ß√£o NORTE (Para cima).
    case 'A': case 'H': case 'LEFT':  State = Snake.enqueue(State, Snake.WEST);  break  // Essa case indica a dire√ß√£o OESTE (Para esquerda).
    case 'S': case 'J': case 'DOWN':  State = Snake.enqueue(State, Snake.SOUTH); break  // Essa case indica a dire√ß√£o SUL   (Para baixo).
    case 'D': case 'L': case 'RIGHT': State = Snake.enqueue(State, Snake.EAST);  break  // Essa case indica a dire√ß√£o LESTE (Para direita).
  } 
});


/**
 * LA√áO PRINCIPAL DO JOGO
 */
const score = state => state.snake.length -1 
// A constante criada para retonar o tamanho da cobra durante o jogo e conseguinte pontua√ß√£o ao decorrer do Game.
// Ela utiliza o estado atual do jogo e retorna o tamanho da lista referente a cobra.

const show = () => console.log('\x1Bc' + Matrix.toString(Matrix.fromState(State))+ '\n' + '[score:' + score(State)+']') // A constante shown √© respos√°vel por mostrar o jogo no Terminal, adicionamos um contador de ponto no jogo chamado de 'score' que conta quantas ma√ßas a cobra comeu no momento.
const step = () => State = Snake.next(State) // Movimenta√ß√£o da cobra

const vel = (v=3) => {              // Referente a taxa de atualiza√ß√£o do jogo em milisegundos; dependendo do numero que essa funcao retorna, o jogo atualizar√° na taxa em milisegundos descrita pelo numero retornado.
    switch (v) {
        case 1:  return 250; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
        case 2:  return 200; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo. 
        case 3:  return 150; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
        case 4:  return 100; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
        case 5:  return 075; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
        case 6:  return 050; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
        default: return 150; break; //* Esses casos se referem ao n√≠vel de velocidade em que o jogo atualiza e por consequencia a velocidade de movimenta√ß√£o da cobra dentro do jogo.
    }
}

setInterval(() => { step();  show();  }, vel(4)) //vel(1) to vel(6); default = vel(3) 
//'setInteval' √© uma funcao que retorna determinada(s) funcao(oes) em um tempo definido em milisegundos. 
// essa fun√ß√£o garante a atualiza√ß√£o constate do jogo garantindo movimenta√ß√£o e din√¢mica dos elementos do jogoS